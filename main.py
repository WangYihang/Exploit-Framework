#!/usr/bin/env python
# encoding: utf-8

from core.log import Log
from core.banner import banner

import sys
import string
import os
import hashlib
import readline
import code
import atexit
import json
import time
import signal

def md5(content):
    return hashlib.md5(content).hexdigest()

def show_help():
    print "Usage : "
    print "        python %s" % (sys.argv[0])
    print "Author : "
    print "        WangYihang <wangyihanger@gmail.com>"
    print "Github : "
    print "        https://github.com/wangyihang/exploit-framework"

def core_commands():
    print "Core Commands"
    print "============="
    print "\tCommand\tDescription"
    print "\t-------\t-----------"
    print "\thelp\tshow help"
    print "\tversion\tshow version"
    print "\tquit\tquit"
    print ""

def module_commands():
    print "Module Commands"
    print "============="
    print "\tCommand\tDescription"
    print "\t-------\t-----------"
    print "\tuse\tSelects a module by name"
    print "\tshow\tDisplays modules of a given type, or all modules"
    print "\tsearch\tSearches module names and descriptions"
    print "\toptions\tDisplays global options or for one or more modules"
    print "\tinfo\tDisplays information about one or more modules"
    print "\tback\tMove back from the current context"
    print ""

def main_help():
    core_commands()
    module_commands()

def main_banner():
    # print "Version: %s" % (version)
    print ">>>Main banner"
    print "// TODO"

def signal_handler(ignum, frame):
    print ""
    Log.info("Enter : 'q|quit|exit' to shutdown the program!")

def main():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    banner()
    webshells = []

    LOCAL_COMMAND_FLAG = True
    main_banner()

    while True:
        Log.context("main")
        context_fresh = raw_input("=>") or "h"
        context = string.lower(context_fresh)
        if context == "h" or context == "help" or context == "?":
            main_help()
        elif context == "q" or context == "quit" or context == "exit":
            Log.info("Quiting...")
            break
        else:
            Log.error("Unsupported function!")
            if LOCAL_COMMAND_FLAG == True:
                Log.info("Executing command on localhost...")
                os.system(context_fresh)

if __name__ == "__main__":
    main()
